{"version":3,"file":"static/js/279.817436e7.chunk.js","mappings":"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","sources":["utils/validationFunctions.js","components/FormPartials/ContactForm.jsx","assets/validationMessages.js","components/FormPartials/LoginForm.jsx","components/FormPartials/RegisterForm.jsx","components/FormPartials/Form/Form.styled.jsx","components/FormPartials/Form/Form.jsx","components/FormPartials/Label/Label.styled.jsx","components/FormPartials/Label/Label.jsx","components/FormPartials/SubmitButton/SubmitButton.styled.jsx","components/FormPartials/SubmitButton/SubmitButton.jsx","components/ContactsPage/ContactList/ContactList.styled.jsx","components/ContactsPage/ContactList/ContactList.jsx","components/ContactsPage/ContactListItem/ContactListItem.styled.jsx","components/ContactsPage/ContactListItem/ContactListItem.jsx","components/ContactsPage/Filter/Filter.styled.jsx","components/ContactsPage/Filter/Filter.jsx","pages/ContactsPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const isFieldEmpty = (fieldName, fieldValue, setNotification) => {\n  const trimmedValue = fieldValue.trim();\n  if (trimmedValue === '') {\n    setNotification({\n      type: 'warning',\n      message: `${fieldName} field can't be empty.`,\n    });\n    return true;\n  }\n  return false;\n};\n\nexport const isPhoneNumberValid = (phoneNumber, setNotification) => {\n  const phoneNumberRegex = new RegExp('^\\\\+?[0-9\\\\s\\\\-\\\\(\\\\)]+$');\n  const validatePhoneNumber = phoneNumberRegex.test(phoneNumber.trim());\n\n  if (!validatePhoneNumber) {\n    setNotification({\n      type: 'error',\n      message: `Phone number can only contain numbers, spaces, dashes, and parentheses.`,\n    });\n    return false;\n  }\n\n  return true;\n};\n\nexport const isEmailValid = (email, setNotification) => {\n  const emailRegex = new RegExp('^\\\\S+@\\\\S+\\\\.\\\\S+$');\n  const validateEmail = emailRegex.test(email.trim());\n\n  if (!validateEmail) {\n    setNotification({\n      type: 'error',\n      message: `Email is not valid.`,\n    });\n    return false;\n  }\n\n  return true;\n};\n\nexport const isPasswordValid = (password, setNotification) => {\n  const passwordRegex = /^(?=.*[a-zA-Z])(?=.*\\d)[a-zA-Z\\d.,-]{8,}$/;\n  const validatePassword = passwordRegex.test(password.trim());\n\n  if (!validatePassword) {\n    setNotification({\n      type: 'error',\n      message: `Password must contain at least one letter, one digit, and be at least 8 characters long.`,\n    });\n    return false;\n  }\n\n  return true;\n};\n\nexport const isUsernameValid = (username, setNotification) => {\n  const usernameRegex = /^[a-zA-Z0-9_]{4,20}$/;\n  const validateUsername = usernameRegex.test(username.trim());\n\n  if (!validateUsername) {\n    setNotification({\n      type: 'error',\n      message: `Username must be 4-20 characters long and contain only letters, numbers and underscores.`,\n    });\n    return false;\n  }\n\n  return true;\n};\n\nexport const isConfirmationMatch = (\n  confirmValue,\n  password,\n  setNotification\n) => {\n  if (confirmValue !== password) {\n    setNotification({\n      type: 'error',\n      message: `Password confirmation does not match.`,\n    });\n    return false;\n  }\n\n  return true;\n};\n\nexport const isContactExist = (\n  contacts,\n  fieldName,\n  fieldValue,\n  setNotification\n) => {\n  const isExist = contacts.find(\n    contact => contact[fieldName.toLowerCase()] === fieldValue.trim()\n  );\n\n  if (isExist) {\n    setNotification({\n      type: 'error',\n      message: `${fieldName} \"${fieldValue.trim()}\" is already exists.`,\n    });\n    return true;\n  }\n\n  return false;\n};\n\nexport const handleAuthFieldBlur = (\n  fieldName,\n  fieldValue,\n  setAlert,\n  isConfirm = false,\n  confirmValue = null\n) => {\n  if (isFieldEmpty(fieldName, fieldValue, setAlert)) return;\n  if (fieldName === 'Username' && !isUsernameValid(fieldValue, setAlert))\n    return;\n  if (fieldName === 'Email' && !isEmailValid(fieldValue, setAlert)) return;\n  if (fieldName === 'Password' && !isPasswordValid(fieldValue, setAlert))\n    return;\n  if (isConfirm && !isConfirmationMatch(fieldValue, confirmValue, setAlert))\n    return;\n  setAlert({\n    type: 'success',\n    message: `${fieldName} is valid.`,\n  });\n};\n","import { useState, useRef, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nimport { addContact, selectContacts } from 'redux/contacts';\nimport { isFieldEmpty, isContactExist, isPhoneNumberValid } from 'utils';\nimport { nameValidationMessage, numberValidationMessage } from 'assets';\nimport { Form, Label, FormAlert, SubmitButton } from 'components/FormPartials';\n\nconst ContactForm = () => {\n  const [nameFieldNotification, setNameFieldNotification] = useState(null);\n  const [numberFieldNotification, setNumberFieldNotification] = useState(null);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const nameInputId = useRef(nanoid());\n  const numberInputId = useRef(nanoid());\n\n  const handleContactsFieldBlur = useMemo(\n    () => (fieldName, fieldValue, setAlert) => {\n      if (isFieldEmpty(fieldName, fieldValue, setAlert)) return;\n      if (\n        fieldName === 'Phone number' &&\n        !isPhoneNumberValid(fieldValue, setAlert)\n      )\n        return;\n      if (isContactExist(contacts, fieldName, fieldValue, setAlert)) return;\n      setAlert({\n        type: 'success',\n        message: `${fieldName} \"${fieldValue.trim()}\" is available.`,\n      });\n    },\n    [contacts]\n  );\n\n  const handleNameBlur = () =>\n    handleContactsFieldBlur('Name', name, setNameFieldNotification);\n\n  const handleNumberBlur = () =>\n    handleContactsFieldBlur('Phone number', number, setNumberFieldNotification);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isNameExist = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    const isNumberExist = contacts.find(contact => contact.number === number);\n\n    if (isNameExist || isNumberExist) {\n      return;\n    }\n\n    const contact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    dispatch(addContact(contact));\n    setName('');\n    setNumber('');\n    setNameFieldNotification(null);\n    setNumberFieldNotification(null);\n  };\n\n  const handleNameInputChange = event => setName(event.target.value);\n  const handleNumberInputChange = event => setNumber(event.target.value);\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label\n        labelTitle=\"Name\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleNameInputChange}\n        onBlur={handleNameBlur}\n        validationStatus={nameFieldNotification}\n        id={nameInputId.current}\n        title={nameValidationMessage}\n      />\n      <FormAlert fieldAlert={nameFieldNotification} />\n      <Label\n        labelTitle=\"Number\"\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleNumberInputChange}\n        onBlur={handleNumberBlur}\n        validationStatus={numberFieldNotification}\n        id={numberInputId.current}\n        title={numberValidationMessage}\n      />\n      <FormAlert fieldAlert={numberFieldNotification} />\n      <SubmitButton buttonText=\"Add contact\" />\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","export const nameValidationMessage =\n  \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\";\n\nexport const numberValidationMessage =\n  'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +';\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { loginization } from 'redux/authorization';\nimport { handleAuthFieldBlur } from 'utils';\nimport { Form, Label, FormAlert, SubmitButton } from 'components/FormPartials';\n\nconst LoginForm = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [emailFieldAlert, setEmailFieldAlert] = useState(null);\n  const [passwordFieldAlert, setPasswordFieldAlert] = useState(null);\n\n  const dispatch = useDispatch();\n\n  const handleEmailBlur = () =>\n    handleAuthFieldBlur('Email', email, setEmailFieldAlert);\n\n  const handlePasswordBlur = () => {\n    handleAuthFieldBlur('Password', password, setPasswordFieldAlert);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    dispatch(loginization({ email, password }));\n    setEmail('');\n    setPassword('');\n    setEmailFieldAlert(null);\n    setPasswordFieldAlert(null);\n  };\n\n  const handleEmailInputChange = event => setEmail(event.target.value);\n  const handlePasswordInputChange = event => setPassword(event.target.value);\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label\n        labelTitle=\"Email\"\n        type=\"email\"\n        name=\"email\"\n        value={email}\n        onChange={handleEmailInputChange}\n        onBlur={handleEmailBlur}\n        validationStatus={emailFieldAlert}\n      />\n      <FormAlert fieldAlert={emailFieldAlert} />\n      <Label\n        labelTitle=\"Password\"\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={handlePasswordInputChange}\n        onBlur={handlePasswordBlur}\n        validationStatus={passwordFieldAlert}\n      />\n      <FormAlert fieldAlert={passwordFieldAlert} />\n      <SubmitButton buttonText=\"Log in\" />\n    </Form>\n  );\n};\n\nexport default LoginForm;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { register } from 'redux/authorization';\nimport { handleAuthFieldBlur } from 'utils';\nimport { Form, Label, FormAlert, SubmitButton } from 'components/FormPartials';\n\nconst RegisterForm = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirm, setConfirm] = useState('');\n  const [usernameFieldAlert, setUsernameFieldAlert] = useState(null);\n  const [emailFieldAlert, setEmailFieldAlert] = useState(null);\n  const [passwordFieldAlert, setPasswordFieldAlert] = useState(null);\n  const [confirmFieldAlert, setConfirmFieldAlert] = useState(null);\n\n  const dispatch = useDispatch();\n\n  const { isLoading, error } = useSelector(state => state.auth);\n\n  const handleUsernameBlur = () =>\n    handleAuthFieldBlur('Username', name, setUsernameFieldAlert);\n\n  const handleEmailBlur = () =>\n    handleAuthFieldBlur('Email', email, setEmailFieldAlert);\n\n  const handlePasswordBlur = () => {\n    handleAuthFieldBlur('Password', password, setPasswordFieldAlert);\n  };\n\n  const handleConfirmBlur = () => {\n    handleAuthFieldBlur(\n      'Confirm Password',\n      confirm,\n      setConfirmFieldAlert,\n      true,\n      password\n    );\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (password === confirm) {\n      dispatch(register({ name, email, password }));\n      if (!isLoading && !error) {\n        setName('');\n        setEmail('');\n        setPassword('');\n        setConfirm('');\n        setUsernameFieldAlert(null);\n        setEmailFieldAlert(null);\n        setPasswordFieldAlert(null);\n        setConfirmFieldAlert(null);\n      }\n    }\n  };\n\n  const handleUsernameInputChange = event => setName(event.target.value);\n  const handleEmailInputChange = event => setEmail(event.target.value);\n  const handlePasswordInputChange = event => setPassword(event.target.value);\n  const handleConfirmInputChange = event => setConfirm(event.target.value);\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label\n        labelTitle=\"Username\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleUsernameInputChange}\n        onBlur={handleUsernameBlur}\n        validationStatus={usernameFieldAlert}\n      />\n      <FormAlert fieldAlert={usernameFieldAlert} />\n      <Label\n        labelTitle=\"Email\"\n        type=\"email\"\n        name=\"email\"\n        value={email}\n        onChange={handleEmailInputChange}\n        onBlur={handleEmailBlur}\n        validationStatus={emailFieldAlert}\n      />\n      <FormAlert fieldAlert={emailFieldAlert} />\n      <Label\n        labelTitle=\"Password\"\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={handlePasswordInputChange}\n        onBlur={handlePasswordBlur}\n        validationStatus={passwordFieldAlert}\n      />\n      <FormAlert fieldAlert={passwordFieldAlert} />\n      <Label\n        labelTitle=\"Confirm Password\"\n        type=\"password\"\n        name=\"confirm\"\n        value={confirm}\n        onChange={handleConfirmInputChange}\n        onBlur={handleConfirmBlur}\n        validationStatus={confirmFieldAlert}\n      />\n      <FormAlert fieldAlert={confirmFieldAlert} />\n      <SubmitButton buttonText=\"Register\" />\n    </Form>\n  );\n};\n\nexport default RegisterForm;\n","import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  min-width: 250px;\n  margin-bottom: 20px;\n`;","import { StyledForm } from './Form.styled.jsx';\n\nconst Form = ({ onSubmit, children }) => {\n  return <StyledForm onSubmit={onSubmit}>{children}</StyledForm>;\n};\n\nexport default Form;\n","import styled from 'styled-components';\n\nexport const LabelStyled = styled.label`\n  color: ${({ theme }) => theme.colors.label};\n`;\n\nexport const Span = styled.span`\n  display: block;\n  margin-bottom: 5px;\n  font-size: 1.1em;\n  font-weight: bold;\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n  border-radius: 5px;\n  border: 2px solid\n    ${({ theme, validationStatus }) => {\n      const type = validationStatus?.type;\n      switch (type) {\n        case 'error':\n          return 'red';\n        case 'warning':\n          return 'orange';\n        case 'success':\n          return 'green';\n        default:\n          return theme.colors.inputBorder;\n      }\n    }};\n  width: 100%;\n  box-sizing: border-box;\n`;\n","import { LabelStyled, Span, Input } from './Label.styled';\n\nconst Label = ({\n  labelTitle,\n  type,\n  name,\n  value,\n  onChange,\n  onBlur,\n  validationStatus,\n  id,\n  title,\n}) => {\n  return (\n    <LabelStyled>\n      <Span>{labelTitle}</Span>\n      <Input\n        type={type}\n        name={name}\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        validationStatus={validationStatus}\n        id={id}\n        title={title}\n        required\n      />\n    </LabelStyled>\n  );\n};\n\nexport default Label;\n","import styled from 'styled-components';\n\nexport const StyledSubmitButton = styled.button`\n  margin-top: 10px;\n  padding: 5px 10px;\n  border-radius: 5px;\n  border: none;\n  background-color: ${({ theme }) => theme.colors.buttonBackgroundDefault};\n  color: ${({ theme }) => theme.colors.buttonText};\n  cursor: pointer;\n  width: 100%;\n  box-sizing: border-box;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.buttonBackgroundHover};\n  }\n`;\n","import { StyledSubmitButton } from './SubmitButton.styled';\n\nconst SubmitButton = ({ buttonText }) => {\n  return <StyledSubmitButton type=\"submit\">{buttonText}</StyledSubmitButton>;\n};\n\nexport default SubmitButton;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport {\n  selectError,\n  selectFilteredContacts,\n  selectIsLoading,\n  fetchContacts,\n} from 'redux/contacts';\n\nimport { ContactListItem } from 'components/ContactsPage';\nimport { List } from './ContactList.styled';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {!filteredContacts?.length && !error && !isLoading && (\n        <p>No contacts found.</p>\n      )}\n\n      <List>\n        {filteredContacts.map(({ id, name, number }) => (\n          <ContactListItem key={id} name={name} number={number} id={id} />\n        ))}\n      </List>\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  gap: 20px;\n  align-items: center;\n  padding: 10px;\n  border: 1px solid ${({ theme }) => theme.colors.itemBorder};\n  border-radius: 5px;\n`;\n\nexport const ContactInfoList = styled.ul`\n  max-width: 400px;\n  overflow: hidden;\n`;\n\nexport const ContactInfoItem = styled.li`\n  &.name {\n    font-size: 16px;\n  }\n`;\n\nexport const DeleteButton = styled.button`\n  padding: 5px;\n  border-radius: 5px;\n  border: none;\n  background-color: ${({ theme }) => theme.colors.buttonBackgroundDefault};\n  color: ${({ theme }) => theme.colors.buttonText};\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.buttonBackgroundHover};\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts';\nimport PropTypes from 'prop-types';\nimport {\n  ContactItem,\n  ContactInfoList,\n  ContactInfoItem,\n  DeleteButton,\n} from './ContactListItem.styled';\n\nconst ContactListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ContactItem>\n      <ContactInfoList>\n        <ContactInfoItem className=\"name\">{name}</ContactInfoItem>\n        <ContactInfoItem>{number}</ContactInfoItem>\n      </ContactInfoList>\n      <DeleteButton onClick={handleDelete}>Delete</DeleteButton>\n    </ContactItem>\n  );\n};\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  font-weight: bold;\n  margin-bottom: 5px;\n  display: block;\n  color: ${({ theme }) => theme.colors.label};\n`;\n\nexport const FilterInput = styled.input`\n  width: 250px;\n  padding: 5px;\n  border-radius: 5px;\n  border: 1px solid ${({ theme }) => theme.colors.inputBorder};\n  margin-bottom: 20px;\n  box-sizing: border-box;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter';\nimport { nanoid } from 'nanoid';\nimport { FilterInput, FilterLabel } from './Filter.styled';\n\nconst searchInputId = nanoid();\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(state => state.filter);\n\n  const handleSearchInputChange = ({ target: { value } }) => {\n    dispatch(setFilter(value));\n  };\n  return (\n    <>\n      <FilterLabel htmlFor={searchInputId}>Find contacts by name</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={handleSearchInputChange}\n        placeholder=\"Enter contact name\"\n        id={searchInputId}\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","// ContactPage.jsx\nimport { ContactList, Filter } from 'components/ContactsPage';\nimport { ContactForm } from 'components/FormPartials';\nimport { Container, MainTitle, Section, SubTitle } from 'components/Common';\n\nconst ContactsPage = () => (\n  <>\n    <Section>\n      <Container>\n        <MainTitle title=\"Contacts\" />\n        <SubTitle title=\"Add a new one...\" />\n        <ContactForm />\n      </Container>\n    </Section>\n    <Section>\n      <Container>\n        <SubTitle title=\"Your Contacts\" />\n        <Filter />\n        <ContactList />\n      </Container>\n    </Section>\n  </>\n);\n\nexport default ContactsPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["isFieldEmpty","fieldName","fieldValue","setNotification","trim","type","message","isEmailValid","email","RegExp","test","isPasswordValid","password","isUsernameValid","username","isConfirmationMatch","confirmValue","handleAuthFieldBlur","setAlert","isConfirm","useState","nameFieldNotification","setNameFieldNotification","numberFieldNotification","setNumberFieldNotification","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","selectContacts","nameInputId","useRef","nanoid","numberInputId","handleContactsFieldBlur","useMemo","phoneNumber","find","contact","toLowerCase","isContactExist","onSubmit","event","preventDefault","isNameExist","isNumberExist","id","addContact","labelTitle","value","onChange","target","onBlur","validationStatus","current","title","FormAlert","fieldAlert","buttonText","setEmail","setPassword","emailFieldAlert","setEmailFieldAlert","passwordFieldAlert","setPasswordFieldAlert","loginization","confirm","setConfirm","usernameFieldAlert","setUsernameFieldAlert","confirmFieldAlert","setConfirmFieldAlert","state","auth","isLoading","error","register","StyledForm","styled","children","LabelStyled","theme","colors","label","Span","Input","inputBorder","required","StyledSubmitButton","buttonBackgroundDefault","buttonBackgroundHover","List","filteredContacts","selectFilteredContacts","selectIsLoading","selectError","useEffect","fetchContacts","length","map","ContactItem","itemBorder","ContactInfoList","ContactInfoItem","DeleteButton","className","onClick","deleteContact","FilterLabel","FilterInput","searchInputId","filter","htmlFor","setFilter","placeholder","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}