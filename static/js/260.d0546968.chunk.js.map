{"version":3,"file":"static/js/260.d0546968.chunk.js","mappings":"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","sources":["utils/constants.js","utils/validationFunctions.js","components/FormPartials/ContactForm.jsx","assets/validationMessages.js","components/FormPartials/LoginForm.jsx","components/FormPartials/RegisterForm.jsx","components/FormPartials/Form/Form.styled.jsx","components/FormPartials/Form/Form.jsx","components/FormPartials/Label/Label.styled.jsx","components/FormPartials/Label/Label.jsx","components/FormPartials/SubmitButton/SubmitButton.styled.jsx","components/FormPartials/SubmitButton/SubmitButton.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const NAME_CHARACTERS_CHECK_REGEX = /^[a-zA-Z0-9_.-]+$/;\nexport const NAME_EDGE_CHAR_VALIDATION_REGEX = /^[^-.].*[^-.]$/;\nexport const EMAIL_REGEX = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,8})+$/;\nexport const PHONE_REGEX = /^\\+?\\d[\\d ()-]{5,14}\\d$/;\nexport const PASSWORD_REGEX = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d.,-]*$/;\n","import {\n  NAME_CHARACTERS_CHECK_REGEX,\n  NAME_EDGE_CHAR_VALIDATION_REGEX,\n  EMAIL_REGEX,\n  PHONE_REGEX,\n  PASSWORD_REGEX,\n} from './constants';\n\nexport const isFieldEmpty = (fieldName, fieldValue, setNotification) => {\n  const trimmedValue = fieldValue.trim();\n  if (trimmedValue === '') {\n    setNotification({\n      type: 'warning',\n      message: `${fieldName} field can't be empty`,\n    });\n    return true;\n  }\n  return false;\n};\n\nexport const isNameValid = (name, setNotification) => {\n  if (name.trim().length < 6 || name.trim().length > 30) {\n    setNotification({\n      type: 'error',\n      message: 'Name must be 6-30 characters long',\n    });\n    return false;\n  }\n\n  if (!NAME_CHARACTERS_CHECK_REGEX.test(name.trim())) {\n    setNotification({\n      type: 'error',\n      message:\n        'Name can only include letters, numbers, underscores, hyphens, and periods',\n    });\n    return false;\n  }\n\n  if (!NAME_EDGE_CHAR_VALIDATION_REGEX.test(name.trim())) {\n    setNotification({\n      type: 'error',\n      message: 'Name cannot begin or end with a hyphen or a period',\n    });\n    return false;\n  }\n\n  return true;\n};\n\nexport const isEmailValid = (email, setNotification) => {\n  if (!EMAIL_REGEX.test(email.trim())) {\n    setNotification({\n      type: 'error',\n      message: `Email is not valid`,\n    });\n    return false;\n  }\n\n  return true;\n};\n\nexport const isPhoneNumberValid = (phoneNumber, setNotification) => {\n  if (!PHONE_REGEX.test(phoneNumber.trim())) {\n    setNotification({\n      type: 'error',\n      message: `Phone number can only contain numbers, spaces, dashes, and parentheses`,\n    });\n    return false;\n  }\n\n  return true;\n};\n\nexport const isPasswordValid = (password, setNotification) => {\n  if (password.trim().length < 6) {\n    setNotification({\n      type: 'error',\n      message: 'Password must be at least 6 characters long',\n    });\n    return false;\n  }\n  if (!PASSWORD_REGEX.test(password.trim())) {\n    setNotification({\n      type: 'error',\n      message: `Password must contain at least one letter, one digit, and can include periods, commas, and hyphens`,\n    });\n    return false;\n  }\n\n  return true;\n};\n\nexport const isConfirmationMatch = (\n  confirmValue,\n  password,\n  setNotification\n) => {\n  if (confirmValue !== password) {\n    setNotification({\n      type: 'error',\n      message: `Password confirmation does not match`,\n    });\n    return false;\n  }\n  if (password.trim().length < 6) {\n    setNotification({\n      type: 'error',\n      message: 'Password must be at least 6 characters long',\n    });\n    return false;\n  }\n  if (!PASSWORD_REGEX.test(password.trim())) {\n    setNotification({\n      type: 'error',\n      message: `Password must contain at least one letter, one digit, and can include periods, commas, and hyphens`,\n    });\n    return false;\n  }\n\n  return true;\n};\n\nexport const isContactExist = (\n  contacts,\n  fieldName,\n  fieldValue,\n  setNotification\n) => {\n  const isExist = contacts.find(\n    contact => contact[fieldName.toLowerCase()] === fieldValue.trim()\n  );\n\n  if (isExist) {\n    setNotification({\n      type: 'error',\n      message: `${fieldName} \"${fieldValue.trim()}\" is already exists`,\n    });\n    return true;\n  }\n\n  return false;\n};\n\nexport const handleAuthFieldBlur = (\n  fieldName,\n  fieldValue,\n  setAlert,\n  isConfirm = false,\n  confirmValue = null\n) => {\n  if (isFieldEmpty(fieldName, fieldValue, setAlert)) return;\n  if (fieldName === 'Name' && !isNameValid(fieldValue, setAlert)) return;\n  if (fieldName === 'Email' && !isEmailValid(fieldValue, setAlert)) return;\n  if (fieldName === 'Password' && !isPasswordValid(fieldValue, setAlert))\n    return;\n  if (isConfirm && !isConfirmationMatch(fieldValue, confirmValue, setAlert))\n    return;\n  setAlert({\n    type: 'success',\n    message: `${fieldName} is valid`,\n  });\n};\n","import { useState, useRef, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nimport { addContact, selectContacts } from 'redux/contacts';\nimport {\n  isFieldEmpty,\n  isContactExist,\n  isPhoneNumberValid,\n  isEmailValid,\n} from 'utils';\nimport {\n  nameValidationMessage,\n  phoneValidationMessage,\n  emailValidationMessage,\n} from 'assets';\nimport { Form, Label, FormAlert, SubmitButton } from 'components/FormPartials';\n\nconst ContactForm = () => {\n  const [nameFieldNotification, setNameFieldNotification] = useState(null);\n  const [phoneFieldNotification, setPhoneFieldNotification] = useState(null);\n  const [emailFieldNotification, setEmailFieldNotification] = useState(null);\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const nameInputId = useRef(nanoid());\n  const phoneInputId = useRef(nanoid());\n  const emailInputId = useRef(nanoid());\n\n  const handleContactsFieldBlur = useMemo(\n    () => (fieldName, fieldValue, setAlert) => {\n      if (isFieldEmpty(fieldName, fieldValue, setAlert)) return;\n      if (\n        fieldName === 'Phone number' &&\n        !isPhoneNumberValid(fieldValue, setAlert)\n      )\n        if (fieldName === 'Email' && !isEmailValid(fieldValue, setAlert))\n          return;\n      if (isContactExist(contacts, fieldName, fieldValue, setAlert)) return;\n      setAlert({\n        type: 'success',\n        message: `${fieldName} \"${fieldValue.trim()}\" is available.`,\n      });\n    },\n    [contacts]\n  );\n\n  const handleNameBlur = () =>\n    handleContactsFieldBlur('Name', name, setNameFieldNotification);\n\n  const handlePhoneBlur = () =>\n    handleContactsFieldBlur('Phone number', phone, setPhoneFieldNotification);\n\n  const handleEmailBlur = () =>\n    handleContactsFieldBlur('Email', email, setEmailFieldNotification);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isNameExist = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    const isPhoneExist = contacts.find(contact => contact.phone === phone);\n\n    if (isNameExist || isPhoneExist) {\n      return;\n    }\n\n    const contact = {\n      name: name,\n      phone: phone,\n      email: email,\n    };\n\n    dispatch(addContact(contact));\n    setName('');\n    setPhone('');\n    setEmail('');\n    setNameFieldNotification(null);\n    setPhoneFieldNotification(null);\n    setEmailFieldNotification(null);\n  };\n\n  const handleNameInputChange = event => setName(event.target.value);\n  const handlePhoneInputChange = event => setPhone(event.target.value);\n  const handleEmailInputChange = event => setEmail(event.target.value);\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label\n        labelTitle=\"Name\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleNameInputChange}\n        onBlur={handleNameBlur}\n        validationStatus={nameFieldNotification}\n        id={nameInputId.current}\n        title={nameValidationMessage}\n      />\n      <FormAlert fieldAlert={nameFieldNotification} />\n      <Label\n        labelTitle=\"Phone\"\n        type=\"tel\"\n        name=\"phone\"\n        value={phone}\n        onChange={handlePhoneInputChange}\n        onBlur={handlePhoneBlur}\n        validationStatus={phoneFieldNotification}\n        id={phoneInputId.current}\n        title={phoneValidationMessage}\n      />\n      <FormAlert fieldAlert={phoneFieldNotification} />\n      <Label\n        labelTitle=\"Email\"\n        type=\"email\"\n        name=\"email\"\n        value={email}\n        onChange={handleEmailInputChange}\n        onBlur={handleEmailBlur}\n        validationStatus={emailFieldNotification}\n        id={emailInputId.current}\n        title={emailValidationMessage}\n      />\n      <FormAlert fieldAlert={emailFieldNotification} />\n      <SubmitButton buttonText=\"Add contact\" />\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","export const nameValidationMessage =\n  \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\";\n\nexport const phoneValidationMessage =\n  'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +';\n\nexport const emailValidationMessage =\n  'Email must be a valid email address, for example johndoe@example.com. It may contain letters, numbers, dots, hyphens and underscores, followed by an @ symbol, and ending with a domain name.';\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { loginization } from 'redux/authorization';\nimport { handleAuthFieldBlur } from 'utils';\nimport { Form, Label, FormAlert, SubmitButton } from 'components/FormPartials';\n\nconst LoginForm = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [emailFieldAlert, setEmailFieldAlert] = useState(null);\n  const [passwordFieldAlert, setPasswordFieldAlert] = useState(null);\n\n  const dispatch = useDispatch();\n\n  const handleEmailBlur = () =>\n    handleAuthFieldBlur('Email', email, setEmailFieldAlert);\n\n  const handlePasswordBlur = () => {\n    handleAuthFieldBlur('Password', password, setPasswordFieldAlert);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    dispatch(loginization({ email, password }));\n    setEmail('');\n    setPassword('');\n    setEmailFieldAlert(null);\n    setPasswordFieldAlert(null);\n  };\n\n  const handleEmailInputChange = event => setEmail(event.target.value);\n  const handlePasswordInputChange = event => setPassword(event.target.value);\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label\n        labelTitle=\"Email\"\n        type=\"email\"\n        name=\"email\"\n        value={email}\n        onChange={handleEmailInputChange}\n        onBlur={handleEmailBlur}\n        validationStatus={emailFieldAlert}\n      />\n      <FormAlert fieldAlert={emailFieldAlert} />\n      <Label\n        labelTitle=\"Password\"\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={handlePasswordInputChange}\n        onBlur={handlePasswordBlur}\n        validationStatus={passwordFieldAlert}\n      />\n      <FormAlert fieldAlert={passwordFieldAlert} />\n      <SubmitButton buttonText=\"Log in\" />\n    </Form>\n  );\n};\n\nexport default LoginForm;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { register } from 'redux/authorization';\nimport { handleAuthFieldBlur } from 'utils';\nimport { Form, Label, FormAlert, SubmitButton } from 'components/FormPartials';\n\nconst RegisterForm = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirm, setConfirm] = useState('');\n  const [nameFieldAlert, setNameFieldAlert] = useState(null);\n  const [emailFieldAlert, setEmailFieldAlert] = useState(null);\n  const [passwordFieldAlert, setPasswordFieldAlert] = useState(null);\n  const [confirmFieldAlert, setConfirmFieldAlert] = useState(null);\n\n  const dispatch = useDispatch();\n\n  const { isLoading, error } = useSelector(state => state.auth);\n\n  const handleNameBlur = () =>\n    handleAuthFieldBlur('Name', name, setNameFieldAlert);\n\n  const handleEmailBlur = () =>\n    handleAuthFieldBlur('Email', email, setEmailFieldAlert);\n\n  const handlePasswordBlur = () => {\n    handleAuthFieldBlur('Password', password, setPasswordFieldAlert);\n  };\n\n  const handleConfirmBlur = () => {\n    handleAuthFieldBlur(\n      'Confirm Password',\n      confirm,\n      setConfirmFieldAlert,\n      true,\n      password\n    );\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (password === confirm) {\n      dispatch(register({ name, email, password }));\n      if (!isLoading && !error) {\n        setName('');\n        setEmail('');\n        setPassword('');\n        setConfirm('');\n        setNameFieldAlert(null);\n        setEmailFieldAlert(null);\n        setPasswordFieldAlert(null);\n        setConfirmFieldAlert(null);\n      }\n    }\n  };\n\n  const handleNameInputChange = event => setName(event.target.value);\n  const handleEmailInputChange = event => setEmail(event.target.value);\n  const handlePasswordInputChange = event => setPassword(event.target.value);\n  const handleConfirmInputChange = event => setConfirm(event.target.value);\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label\n        labelTitle=\"Name\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleNameInputChange}\n        onBlur={handleNameBlur}\n        validationStatus={nameFieldAlert}\n      />\n      <FormAlert fieldAlert={nameFieldAlert} />\n      <Label\n        labelTitle=\"Email\"\n        type=\"email\"\n        name=\"email\"\n        value={email}\n        onChange={handleEmailInputChange}\n        onBlur={handleEmailBlur}\n        validationStatus={emailFieldAlert}\n      />\n      <FormAlert fieldAlert={emailFieldAlert} />\n      <Label\n        labelTitle=\"Password\"\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={handlePasswordInputChange}\n        onBlur={handlePasswordBlur}\n        validationStatus={passwordFieldAlert}\n      />\n      <FormAlert fieldAlert={passwordFieldAlert} />\n      <Label\n        labelTitle=\"Confirm Password\"\n        type=\"password\"\n        name=\"confirm\"\n        value={confirm}\n        onChange={handleConfirmInputChange}\n        onBlur={handleConfirmBlur}\n        validationStatus={confirmFieldAlert}\n      />\n      <FormAlert fieldAlert={confirmFieldAlert} />\n      <SubmitButton buttonText=\"Register\" />\n    </Form>\n  );\n};\n\nexport default RegisterForm;\n","import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  min-width: 250px;\n  margin-bottom: 20px;\n`;","import { StyledForm } from './Form.styled.jsx';\n\nconst Form = ({ onSubmit, children }) => {\n  return <StyledForm onSubmit={onSubmit}>{children}</StyledForm>;\n};\n\nexport default Form;\n","import styled from 'styled-components';\n\nexport const LabelStyled = styled.label`\n  color: ${({ theme }) => theme.colors.label};\n`;\n\nexport const Span = styled.span`\n  display: block;\n  margin-bottom: 5px;\n  font-size: 1.1em;\n  font-weight: bold;\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n  border-radius: 5px;\n  border: 2px solid\n    ${({ theme, validationStatus }) => {\n      const type = validationStatus?.type;\n      switch (type) {\n        case 'error':\n          return 'red';\n        case 'warning':\n          return 'orange';\n        case 'success':\n          return 'green';\n        default:\n          return theme.colors.inputBorder;\n      }\n    }};\n  width: 100%;\n  box-sizing: border-box;\n`;\n","import { LabelStyled, Span, Input } from './Label.styled';\n\nconst Label = ({\n  labelTitle,\n  type,\n  name,\n  value,\n  onChange,\n  onBlur,\n  validationStatus,\n  id,\n  title,\n}) => {\n  return (\n    <LabelStyled>\n      <Span>{labelTitle}</Span>\n      <Input\n        type={type}\n        name={name}\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        validationStatus={validationStatus}\n        id={id}\n        title={title}\n        required\n      />\n    </LabelStyled>\n  );\n};\n\nexport default Label;\n","import styled from 'styled-components';\n\nexport const StyledSubmitButton = styled.button`\n  margin-top: 10px;\n  padding: 5px 10px;\n  border-radius: 5px;\n  border: none;\n  background-color: ${({ theme }) => theme.colors.buttonBackgroundDefault};\n  color: ${({ theme }) => theme.colors.buttonText};\n  cursor: pointer;\n  width: 100%;\n  box-sizing: border-box;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.buttonBackgroundHover};\n  }\n`;\n","import { StyledSubmitButton } from './SubmitButton.styled';\n\nconst SubmitButton = ({ buttonText }) => {\n  return <StyledSubmitButton type=\"submit\">{buttonText}</StyledSubmitButton>;\n};\n\nexport default SubmitButton;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["NAME_CHARACTERS_CHECK_REGEX","NAME_EDGE_CHAR_VALIDATION_REGEX","EMAIL_REGEX","PHONE_REGEX","PASSWORD_REGEX","isFieldEmpty","fieldName","fieldValue","setNotification","trim","type","message","isNameValid","name","length","test","isEmailValid","email","isPasswordValid","password","isConfirmationMatch","confirmValue","handleAuthFieldBlur","setAlert","isConfirm","useState","nameFieldNotification","setNameFieldNotification","phoneFieldNotification","setPhoneFieldNotification","emailFieldNotification","setEmailFieldNotification","setName","phone","setPhone","setEmail","dispatch","useDispatch","contacts","useSelector","selectContacts","nameInputId","useRef","nanoid","phoneInputId","emailInputId","handleContactsFieldBlur","useMemo","phoneNumber","find","contact","toLowerCase","isContactExist","onSubmit","event","preventDefault","isNameExist","isPhoneExist","addContact","labelTitle","value","onChange","target","onBlur","validationStatus","id","current","title","FormAlert","fieldAlert","buttonText","setPassword","emailFieldAlert","setEmailFieldAlert","passwordFieldAlert","setPasswordFieldAlert","loginization","confirm","setConfirm","nameFieldAlert","setNameFieldAlert","confirmFieldAlert","setConfirmFieldAlert","state","auth","isLoading","error","register","StyledForm","styled","children","LabelStyled","theme","colors","label","Span","Input","inputBorder","required","StyledSubmitButton","buttonBackgroundDefault","buttonBackgroundHover","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}